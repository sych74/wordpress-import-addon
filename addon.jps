type: install
name: WordPress Migrator
logo: /images/migrate-logo.svg
description: Migrate your web site from remote WordPress installation

baseUrl: https://raw.githubusercontent.com/sych74/wordpress-import-addon/master

onBeforeInit: | 
  // CHANGE VARIABLES
  const targetUID = 2391;
  
  const envName = "env-6381667";
  const ssh_host = "198.244.136.252";
  const ssh_port = 22;
  const ssh_user = "root";
  const ssh_pass = "abcABC123";
  
  // NOT EDIT 
  // init vars
  var resp, containerID;
  
  // check migrator env
  resp = jelastic.env.control.GetEnvInfo(envName, session);
  if (resp.result != 0) return resp;
  
  for (var i = 0, k = resp.nodes; i < k.length; i++) {
  if (k[i].nodeGroup == 'cp')
    containerID = k[i].id;
  }    
  
  //TODO: handle errors
  
  // load projects
  var command = "bash /home/jelastic/migrator/migrator.sh getRemoteProjects --ssh-user=" + ssh_user + " --ssh-password=" + ssh_pass + " --ssh-host=" + ssh_host + " --ssh-port=" + ssh_port + " --format=json"; 
  resp = api.env.control.ExecCmdById(envName, session, containerID, toJSON([{ "command": command }]), true);
  if (resp.result != 0) return resp;
  
  resp = jelastic.env.control.ExecCmdById(envName, session, containerID, toJSON([{ command: 'cat /home/jelastic/migrator/projects.json' }]), true);
  if ( resp.result != 0 ) return resp;
  
  var projectList = JSON.parse(resp.responses[0].out);
  
  var ownerList = prepareOwners(projectList);
  
  var projectListPrepared = prepareProjects(ownerList,projectList);
  
  // load subscriptions
  resp = jelastic.administration.subscription.GetSubscriptions({
    appid: "cluster", 
    session: session, 
    uid: targetUID,
    status: "ACTIVE",
    expandFields: "*"
  });
  if ( resp.result != 0 ) return resp;  
  
  var subscriptions = prepareSubscriptions(resp.array);
  
  // utils
  
  function prepareOwners(values) {
    var aResultValues = [];
    values = values || [];
    var uniqueOwnerIds = new Set();

    values.forEach(obj => { uniqueOwnerIds.add(obj.ownerId); });
    const uniqueOwnerIdsArray = Array.from(uniqueOwnerIds);

    for (var i = 0, n = uniqueOwnerIdsArray.length; i < n; i++) {
      aResultValues.push({
        caption: uniqueOwnerIdsArray[i],
        value:  uniqueOwnerIdsArray[i]
      });
    }
    return aResultValues;
  }

  function prepareProjects(owners,projects) {
    var oResultProjects = {}, aValues;
    for (var k = 0, l = owners.length; k < l; k++) {
      aValues = [];
      for (var i = 0, n = projects.length; i < n; i++) {
        if (owners[k].value === projects[i].ownerId) {
          aValues.push({
            caption: projects[i].siteUrl + " | " + projects[i].fullPath,
            value: projects[i].id
          });
        }
      }
      oResultProjects[owners[k].value] = aValues;
    }
    return oResultProjects;
  }
  
  function prepareSubscriptions(values) {
    var aResultValues = [], item, servicePlanItem;
        
    values = values || [];
   
    for (var i = 0, n = values.length; i < n; i++) {
      item = values[i];
      servicePlanItem = item.items[0];
      
      aResultValues.push({
        caption: item.product.displayName + " - " + servicePlanItem.servicePlan.displayName + "    (" + servicePlanItem.resources.length + "/" + servicePlanItem.quantity + ")",
        value: item.id
      });
    }
    
    return aResultValues;
  }
  // format settings
  var fields = [];
  
  fields.push({
    "caption": "Target User ID",
    "type": "displayfield",
    "tooltip": "",          
    "required": false
  }, {
    "caption": "Target User ID",
    "type": "string",    
    "name": "targetUID",
    "required": true,
    "hideLabel": true,
    "default": targetUID
  }, {
    "type": "string",    
    "required": false,
    "hideLabel": true,
    "disabled": true,
    "default": jelastic.system.admin.GetUserInfo(appid, session, targetUID).email
  },{
    "caption": "Subscription",
    "type": "displayfield",
    "tooltip": "Select the subscription to which you want to import",          
    "required": false
  },{
    "caption": "Subscription",
    "type": "list",
    "tooltip": "Select the subscription to which you want to import",          
    "name": "subscription",
    "required": true,
    "hideLabel": true,
    "values": subscriptions
  }, {
    "type": "separator"
  }, {
    "caption": "Source User ID",
    "type": "displayfield",
    "tooltip": "Select the user from which you want to import",          
    "required": false
  },{
    "caption": "Users",
    "type": "list",
    "tooltip": "Select the project which you want to import",          
    "name": "users",
    "required": true,
    "hideLabel": true,
    "values": ownerList
  },{
    "caption": "Projects",
    "type": "displayfield",
    "tooltip": "Select the project which you want to import",          
    "required": false
  },{
    "caption": "Projects",
    "type": "list",
    "tooltip": "Select the project which you want to import",          
    "name": "projects",
    "required": true,
    "multiSelect": true,
    "hideLabel": true,
    "dependsOn": {
      "users" : projectListPrepared
    }
  }, {
    "type": "string",    
    "name": "envName",
    "required": true,
    "hidden": true,
    "default": envName
  }, {
    "type": "string",    
    "name": "containerID",
    "required": true,
    "hidden": true,
    "default": containerID
  }, {
    "type": "string",    
    "name": "targetUID",
    "required": true,
    "hidden": true,
    "default": targetUID
  })
  return {
    result: 0,
    settings : {
      fields: fields
    }
  };
targetNodes:
  nodeType:
    - nginxphp
    - nginxphp-dockerized
  
responses:    
  701:
    type: warning
    message: SSH connection is failed. Please check SSH connection details!
    
  702:
    type: warning
    message: WP Toolkit utility isnt activated for this account. Please activate!  
    
  13001:
    type: warning
    message: Subscription not found     
    
  13002:
    type: warning
    message: "Validation: selected project count is greater than free slots in the subscription!"
    
  99:
    type: warning
    message: |
      Errors were discovered during the project migration.
      Please check the **/var/log/migrator.log** log file on master node of CP layer for details.
onInstall:
  - log: '${settings}'
  - deployProjects

globals:
  migration_dir: /home/jelastic/migrator
  wpenv_file: /home/jelastic/migrator/.wpenv
  projects_file: /home/jelastic/migrator/projects.json
  tableName: WPMigrator

actions:
  deployProjects:
    - script: |
        // Signin As Client
        var resp = jelastic.system.admin.SigninAsClient("cluster", session, "${settings.targetUID}");
        if (resp.result != 0) return resp;
        return { result: 0, onAfterReturn: { setGlobals: { userSession: resp.session } } };

    - script: |
        var targetUID = '${settings.targetUID}',
            subscriptionId = '${settings.subscription}',
            projectList = '${settings.projects}'.split(','),
            envName = '${settings.envName}',
            actions = [],
            containerID = '${settings.containerID}',
            parts, projectPHPverion, enginePHP;
            
        function validateInstallationCount(subscription, count) {
          var servicePlanItem,
              availableCount,
              result = { result: 0 };
          
          if (!subscription) {
            return { result: 13001 };
          }
        
          servicePlanItem = subscription.items[0];
          availableCount = servicePlanItem.quantity - servicePlanItem.resources.length;
          
          if (count > availableCount) {
            result = { result: 13002 };
          }
          return result;
        }            
      
        // generate envName
        function generateEnvName() {
          var randomNumber = Math.floor(Math.random() * 90000000) + 10000000;
          return "wp-" + randomNumber;
        }
        
        // load subscription
        resp = jelastic.administration.subscription.GetSubscriptions({
          appid: "cluster", 
          session: session, 
          id: subscriptionId,
          expandFields: "*"
        });
        if (resp.result != 0) return resp; 
        
        // validate count
        resp = validateInstallationCount(resp.array[0], projectList.length);
        if (resp.result != 0) return resp;
           
        var wpenv_file_content = jelastic.env.file.Read(envName, session, '${globals.wpenv_file}', null, null, containerID);
        if (wpenv_file_content.result != 0) return wpenv_file_content;
        var projects_file_content = jelastic.env.file.Read(envName, session, '${globals.projects_file}', null, null, containerID);        
        if (projects_file_content.result != 0) return projects_file_content;
        
        // Getting php version for each of projects
        resp = jelastic.env.control.ExecCmdById(envName, session, containerID, toJSON([{ command: 'cat /home/jelastic/migrator/projectsPHP.json' }]), true);
        if ( resp.result != 0 ) return resp;

        // Creating envs and migration projects
        var tableName = "${globals.tableName}";
        var env_name, createObject;
        for (var i = 0, n = projectList.length; i < n; i ++) {
          projectPHPverion = JSON.parse(resp.responses[0].out).find(x => x.id === parseInt(projectList[i])).php_version;
          parts = projectPHPverion.split(".");     
          enginePHP = "php" + parts.slice(0, 2).join(".");
          env_name = generateEnvName();      
          createObject = api.data.base.CreateObject(tableName, {
            envName: env_name,
            projectName:  projectList[i],
            uid: targetUID,
            status: "failed"
          });
          if (createObject.result != 0) return createObject;
          actions.push({
            jps: "${baseUrl}/scripts/createEnvironment.jps?_r=${fn.random}",
            settings: {
              "master_env": envName,
              "env_name": env_name,
              "php_engine": enginePHP,
              "project_id": projectList[i],
              "wpenv_file_content": wpenv_file_content.body,
              "projects_file_content": projects_file_content.body,
              "subscriptionId": subscriptionId,
              "userSession": "${globals.userSession}",
              "targetUID": targetUID
            }
          });
        }        
        return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };
    
    - script: |
        // Signout
        return jelastic.users.authentication.Signout("cluster", "${globals.userSession");
        
